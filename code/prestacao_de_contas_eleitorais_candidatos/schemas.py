import polars as pl


def schema_despesas_contratadas() -> pl.Schema:
    return pl.Schema(
        {
            'DT_GERACAO': pl.Date(),
            'HH_GERACAO': pl.String(),
            'AA_ELEICAO': pl.String(),
            'CD_TIPO_ELEICAO': pl.Int64(),
            'NM_TIPO_ELEICAO': pl.String(),
            'CD_ELEICAO': pl.Int64(),
            'DS_ELEICAO': pl.String(),
            'DT_ELEICAO': pl.Date(),
            'ST_TURNO': pl.String(),
            'TP_PRESTACAO_CONTAS': pl.String(),
            'DT_PRESTACAO_CONTAS': pl.Date(),
            'SQ_PRESTADOR_CONTAS': pl.String(),
            'SG_UF': pl.String(),
            'SG_UE': pl.String(),
            'NM_UE': pl.String(),
            'NR_CNPJ_PRESTADOR_CONTA': pl.String(),
            'CD_CARGO': pl.Int64(),
            'DS_CARGO': pl.String(),
            'SQ_CANDIDATO': pl.String(),
            'NR_CANDIDATO': pl.String(),
            'NM_CANDIDATO': pl.String(),
            'NR_CPF_CANDIDATO': pl.String(),
            'NR_CPF_VICE_CANDIDATO': pl.String(),
            'NR_PARTIDO': pl.String(),
            'SG_PARTIDO': pl.String(),
            'NM_PARTIDO': pl.String(),
            'CD_TIPO_FORNECEDOR': pl.Int64(),
            'DS_TIPO_FORNECEDOR': pl.String(),
            'CD_CNAE_FORNECEDOR': pl.Int64(),
            'DS_CNAE_FORNECEDOR': pl.String(),
            'NR_CPF_CNPJ_FORNECEDOR': pl.String(),
            'NM_FORNECEDOR': pl.String(),
            'NM_FORNECEDOR_RFB': pl.String(),
            'CD_ESFERA_PART_FORNECEDOR': pl.Int64(),
            'DS_ESFERA_PART_FORNECEDOR': pl.String(),
            'SG_UF_FORNECEDOR': pl.String(),
            'CD_MUNICIPIO_FORNECEDOR': pl.Int64(),
            'NM_MUNICIPIO_FORNECEDOR': pl.String(),
            'SQ_CANDIDATO_FORNECEDOR': pl.String(),
            'NR_CANDIDATO_FORNECEDOR': pl.String(),
            'CD_CARGO_FORNECEDOR': pl.Int64(),
            'DS_CARGO_FORNECEDOR': pl.String(),
            'NR_PARTIDO_FORNECEDOR': pl.String(),
            'SG_PARTIDO_FORNECEDOR': pl.String(),
            'NM_PARTIDO_FORNECEDOR': pl.String(),
            'DS_TIPO_DOCUMENTO': pl.String(),
            'NR_DOCUMENTO': pl.String(),
            'CD_ORIGEM_DESPESA': pl.Int64(),
            'DS_ORIGEM_DESPESA': pl.String(),
            'SQ_DESPESA': pl.String(),
            'DT_DESPESA': pl.Date(),
            'DS_DESPESA': pl.String(),
            'VR_DESPESA_CONTRATADA': pl.Decimal(15, 2)
        }
    )


def schema_despesas_pagas() -> pl.Schema:
    return pl.Schema(
        {
            "DT_GERACAO": pl.Date(),
            "HH_GERACAO": pl.String(),
            "AA_ELEICAO": pl.String(),
            "CD_TIPO_ELEICAO": pl.Int64(),
            "NM_TIPO_ELEICAO": pl.String(),
            "CD_ELEICAO": pl.Int64(),
            "DS_ELEICAO": pl.String(),
            "DT_ELEICAO": pl.Date(),
            "ST_TURNO": pl.String(),
            "TP_PRESTACAO_CONTAS": pl.String(),
            "DT_PRESTACAO_CONTAS": pl.Date(),
            "SQ_PRESTADOR_CONTAS": pl.String(),
            "SG_UF": pl.String(),
            "DS_TIPO_DOCUMENTO": pl.String(),
            "NR_DOCUMENTO": pl.String(),
            "CD_FONTE_DESPESA": pl.Int64(),
            "DS_FONTE_DESPESA": pl.String(),
            "CD_ORIGEM_DESPESA": pl.Int64(),
            "DS_ORIGEM_DESPESA": pl.String(),
            "CD_NATUREZA_DESPESA": pl.Int64(),
            "DS_NATUREZA_DESPESA": pl.String(),
            "CD_ESPECIE_RECURSO": pl.Int64(),
            "DS_ESPECIE_RECURSO": pl.String(),
            "SQ_DESPESA": pl.String(),
            "SQ_PARCELAMENTO_DESPESA": pl.String(),
            "DT_PAGTO_DESPESA": pl.Date(),
            "DS_DESPESA": pl.String(),
            "VR_PAGTO_DESPESA": pl.Decimal(15, 2)
        }
    )


def schema_receitas() -> pl.Schema:
    return pl.Schema(
        {
            "DT_GERACAO": pl.Date(),
            "HH_GERACAO": pl.String(),
            "AA_ELEICAO": pl.String(),
            "CD_TIPO_ELEICAO": pl.Int64(),
            "NM_TIPO_ELEICAO": pl.String(),
            "CD_ELEICAO": pl.Int64(),
            "DS_ELEICAO": pl.String(),
            "DT_ELEICAO": pl.Date(),
            "ST_TURNO": pl.String(),
            "TP_PRESTACAO_CONTAS": pl.String(),
            "DT_PRESTACAO_CONTAS": pl.Date(),
            "SQ_PRESTADOR_CONTAS": pl.String(),
            "SG_UF": pl.String(),
            "SG_UE": pl.String(),
            "NM_UE": pl.String(),
            "NR_CNPJ_PRESTADOR_CONTA": pl.String(),
            "CD_CARGO": pl.Int64(),
            "DS_CARGO": pl.String(),
            "SQ_CANDIDATO": pl.String(),
            "NR_CANDIDATO": pl.String(),
            "NM_CANDIDATO": pl.String(),
            "NR_CPF_CANDIDATO": pl.String(),
            "NR_CPF_VICE_CANDIDATO": pl.String(),
            "NR_PARTIDO": pl.String(),
            "SG_PARTIDO": pl.String(),
            "NM_PARTIDO": pl.String(),
            "CD_FONTE_RECEITA": pl.Int64(),
            "DS_FONTE_RECEITA": pl.String(),
            "CD_ORIGEM_RECEITA": pl.Int64(),
            "DS_ORIGEM_RECEITA": pl.String(),
            "CD_NATUREZA_RECEITA": pl.Int64(),
            "DS_NATUREZA_RECEITA": pl.String(),
            "CD_ESPECIE_RECEITA": pl.Int64(),
            "DS_ESPECIE_RECEITA": pl.String(),
            "CD_CNAE_DOADOR": pl.Int64(),
            "DS_CNAE_DOADOR": pl.String(),
            "NR_CPF_CNPJ_DOADOR": pl.String(),
            "NM_DOADOR": pl.String(),
            "NM_DOADOR_RFB": pl.String(),
            "CD_ESFERA_PARTIDARIA_DOADOR": pl.String(),
            "DS_ESFERA_PARTIDARIA_DOADOR": pl.String(),
            "SG_UF_DOADOR": pl.String(),
            "CD_MUNICIPIO_DOADOR": pl.Int64(),
            "NM_MUNICIPIO_DOADOR": pl.String(),
            "SQ_CANDIDATO_DOADOR": pl.String(),
            "NR_CANDIDATO_DOADOR": pl.String(),
            "CD_CARGO_CANDIDATO_DOADOR": pl.Int64(),
            "DS_CARGO_CANDIDATO_DOADOR": pl.String(),
            "NR_PARTIDO_DOADOR": pl.String(),
            "SG_PARTIDO_DOADOR": pl.String(),
            "NM_PARTIDO_DOADOR": pl.String(),
            "NR_RECIBO_DOACAO": pl.String(),
            "NR_DOCUMENTO_DOACAO": pl.String(),
            "SQ_RECEITA": pl.String(),
            "DT_RECEITA": pl.Date(),
            "DS_RECEITA": pl.String(),
            "VR_RECEITA": pl.Decimal(15, 2),
            "DS_NATUREZA_RECURSO_ESTIMAVEL": pl.String(),
            "DS_GENERO": pl.String(),
            "DS_COR_RACA": pl.String()
        }
    )


def schema_receitas_doador_originario() -> pl.Schema:
    return pl.Schema(
        {
            "DT_GERACAO": pl.Date(),
            "HH_GERACAO": pl.String(),
            "AA_ELEICAO": pl.String(),
            "CD_TIPO_ELEICAO": pl.Int64(),
            "NM_TIPO_ELEICAO": pl.String(),
            "CD_ELEICAO": pl.Int64(),
            "DS_ELEICAO": pl.String(),
            "DT_ELEICAO": pl.Date(),
            "ST_TURNO": pl.String(),
            "TP_PRESTACAO_CONTAS": pl.String(),
            "DT_PRESTACAO_CONTAS": pl.Date(),
            "SQ_PRESTADOR_CONTAS": pl.String(),
            "SG_UF": pl.String(),
            "NR_CPF_CNPJ_DOADOR_ORIGINARIO": pl.String(),
            "NM_DOADOR_ORIGINARIO": pl.String(),
            "NM_DOADOR_ORIGINARIO_RFB": pl.String(),
            "TP_DOADOR_ORIGINARIO": pl.String(),
            "CD_CNAE_DOADOR_ORIGINARIO": pl.Int64(),
            "DS_CNAE_DOADOR_ORIGINARIO": pl.String(),
            "SQ_RECEITA": pl.String(),
            "DT_RECEITA": pl.Date(),
            "DS_RECEITA": pl.String(),
            "VR_RECEITA": pl.Decimal(15, 2)
        }
    )
